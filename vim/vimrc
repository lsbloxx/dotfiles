" vi: ft=vim
"
" helpful reads:
" - for further help see :options


" This line should not be removed as it ensures that various options are
" properly set to work with the vim-related packages.
runtime! archlinux.vim

" disable vi-compatibility
set nocompatible


" install vim-plug: `curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim`
" install your vim plugins: `:PlugInstall`
call plug#begin()
Plug 'Rigellute/rigel'
Plug 'luochen1990/rainbow'
Plug 'junegunn/fzf.vim'
" requirements pacman: fzf
Plug 'dense-analysis/ale'
Plug 'itchyny/lightline.vim'
Plug 'maximbaz/lightline-ale'
Plug 'liuchengxu/vista.vim'
Plug 'mbbill/undotree'
Plug 'tpope/vim-fugitive'
" requirements pacman: git
Plug 'airblade/vim-gitgutter'
" requirements pacman: git
Plug 'mattn/emmet-vim'
Plug 'davidhalter/jedi-vim'
Plug 'python-rope/ropevim'
" requirements pacman: python-rope, pip: ropevim
Plug 'rust-lang/rust.vim'
Plug 'racer-rust/vim-racer'
" requirements pacman: rust-racer
call plug#end()


filetype on
filetype plugin on
filetype indent on
syntax enable

set t_Co=256
set ttyfast
set anti
set term=xterm-256color
set encoding=utf-8

set cursorline
set colorcolumn=100
set showmatch
set scrolloff=3
set number
set mouse=a

set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab
set expandtab
set cindent
set breakindent
set breakindentopt=shift:2
set linebreak

set hlsearch
set incsearch
set ignorecase
set smartcase
set grepprg=rg\ --vimgrep

set path+=**
set wildmenu
set wildmode=longest:list,full
set wildignore+=*.a,*.o
set wildignore+=.DS_Store,.git,.hg,.svn
set wildignore+=*~,*.swp,*.tmp
set completeopt=menuone,longest
set exrc

set undodir=~/.vim/undodir
set undofile
set undolevels=1000
set undoreload=10000

set hidden


" undotree
if has("persistent_undo")
    set undodir=$HOME."/.cache/vim-undodir"
    set undofile
    nnoremap <F12> :UndotreeToggle<cr>
endif

" rigel color scheme
" https://github.com/alacritty/alacritty/issues/109
if exists('+termguicolors')
  let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif
colorscheme rigel
hi MatchParen cterm=NONE,bold gui=NONE,bold guifg=NONE guibg=#ffcc1b
" adjustments in ~/.vim/plugged/rigel/autoload/lightline/colorscheme/rigel.vim
" let s:p.normal.error = [[["#002635", 235], ["#c43060", 167]]]
" let s:p.normal.warning = [[["#002635", 235], ["#f08e48", 209]]]

" lightline
set laststatus=2
set noshowmode
let g:rigel_lightline = 1
let g:lightline = {
    \ 'colorscheme': 'rigel',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
    \   'right': [ [ 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok' ],
    \              [ 'lineinfo' ],
    \              [ 'percent' ],
    \              [ 'filetype', 'fileencoding', 'fileformat', 'charvaluehex' ] ],
    \ },
    \ 'component_expand': {
    \  'linter_infos': 'lightline#ale#infos',
    \  'linter_warnings': 'lightline#ale#warnings',
    \  'linter_errors': 'lightline#ale#errors',
    \  'linter_ok': 'lightline#ale#ok',
    \ },
    \ 'component_type': {
    \     'linter_infos': 'right',
    \     'linter_warnings': 'warning',
    \     'linter_errors': 'error',
    \     'linter_ok': 'right',
    \ },
    \ 'component': {
    \   'charvaluehex': '0x%02B'
    \ },
    \ 'component_function': {
    \   'gitbranch': 'FugitiveHead'
    \ },
    \ }

" fzf/fzf.vim
let $FZF_DEFAULT_COMMAND = 'fd --type file --no-ignore --hidden --exclude .git --exclude .pyenv --exclude .venv --exclude __pycache__'
let g:fzf_buffers_jump=1
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --smart-case --color=always -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview('right:50%', '?'), <bang>0)
nnoremap <C-@> :Files<CR>
map <C-m>g :Rg<CR>
map <C-m>b :Buffers<CR>
map <C-m>l :Lines<CR>
map <C-m>c :Commands<CR>
map <C-m>s :GFiles?<CR>
map <C-m>f :GFiles<CR>
map <C-m>t :Tags<CR>
map <C-m>j :BTags<CR>
map <C-m>w :Windows<CR>
map <C-m>h :Helptags<CR>
map <C-m>v :Filetypes<CR>
map <C-m>m :Marks<CR>
map <C-m>: :History:<CR>
map <C-m>/ :History/<CR>
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file)
imap <c-x><c-l> <plug>(fzf-complete-line)

" rainbow
let g:rainbow_active = 1

" ale
let g:ale_sign_error = '!'
let g:ale_sign_warning = '?'
let g:ale_linters_explicit = 1
" let g:ale_fixers = {'*': ['remove_trailing_lines', 'trim_whitespace']}
" let g:ale_fix_on_save = 1
let g:ale_linters = {
    \   'tex': ['chktex'],
    \   'plaintex': ['chktex'],
    \   'rust': ['cargo', 'rustc'],
    \   'python': ['pylint'],
    \   'sh': ['shellcheck'],
    \}
" let g:ale_virtualenv_dir_names = ['.venv', '.pyenv', '.pyenv3', '.pyenv2']
let g:ale_python_pylint_auto_pipenv = 1
let g:ale_python_pylint_use_global = 1
let g:ale_python_pylint_options = "--disable=missing-docstring,missing-module-docstring,too-few-public-methods,bad-whitespace,wildcard-import,unused-wildcard-import,line-too-long,global-statement,too-many-arguments,too-many-instance-attributes,logging-format-interpolation"
let g:ale_sh_shellcheck_options = "-x"
let g:ale_sh_shellcheck_exclusions = ""
let g:ale_tex_chktex_options = "-wall -q -n8 -n27 -n22 -n30 -n1 -n13"
nmap [l <Plug>(ale_previous_wrap)
nmap ]l <Plug>(ale_next_wrap)
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 1
let g:ale_warn_about_trailing_whitespace = 1
let g:ale_warn_about_trailing_blank_lines = 1

" vim-jedi
if exists(":JediDebugInfo")
    let g:jedi#auto_initialization = 0
    let g:jedi#show_call_signatures = "2"
    au FileType python let g:jedi#auto_initialization = 1
endif

" vim-racer.vim
let g:racer_cmd = "/usr/bin/racer"
let g:racer_insert_paren = 1
let g:racer_experimental_completer = 1
au FileType rust nmap gd <Plug>(rust-def)
au FileType rust nmap gs <Plug>(rust-def-split)
au FileType rust nmap gx <Plug>(rust-def-vertical)
au FileType rust nmap <leader>gd <Plug>(rust-doc)
au FileType rust imap <C-p> <C-x><C-o>

" rust.vim
let g:rustfmt_autosave = 1
au FileType rust nmap <leader>rr :RustRun<CR>
au FileType rust nmap <leader>rt :RustTest<CR>
au FileType rust nmap <leader>re :RustExpand<CR>
au FileType rust nmap <leader>rb :Cargo build<CR>
au FileType rust nmap <leader>rc :Cargo clippy<CR>
