#!/usr/bin/bash
# vi: ft=bash

# requirements: fzf, pass, bash, gpg-connect-agent, fd/find, grep, sed, gnu coreutils, xargs, xdotool
# helpful reads:
# - https://demu.red/blog/2016/06/how-to-check-if-your-gpg-key-is-in-cache/
# - https://unix.stackexchange.com/questions/475352/where-does-gpg-agent-store-the-passphrase-i-need-to-restore-it


set -euo pipefail
shopt -s extglob

# global variables
ENABLE_PREVIEW="${ENABLE_PREVIEW:-0}"
export PASSWORD_STORE_DIR="${PASSWORD_STORE_DIR:-$HOME/.password-store}"

function get_password_files {
    cd "$PASSWORD_STORE_DIR"

    if type fd &>/dev/null; then
        fd --type f --hidden --no-ignore --extension 'gpg' | sed 's|.gpg||'
    elif type find &>/dev/null; then
        find . -type f -iname '*\.gpg' -printf '%P\n' | sed "s|.gpg||"
    else
        # reset the gpg key id to (implicitly) disable the preview
        ENABLE_PREVIEW="0"
        printf "Please install 'fd' or 'find'\\n"
    fi
}

function is_password_store_gpg_key_agent_cached {
    if [[ ! -e "$PASSWORD_STORE_DIR/.gpg-id" ]]; then
        return 1
    fi

    xargs -r gpg --list-secret-keys --with-keygrip < "$PASSWORD_STORE_DIR/.gpg-id" | \
        grep --color=never -Eo '[0-9a-fA-F]{8,}' | \
        xargs -rI{} gpg-connect-agent 'keyinfo {}' '/bye' | \
        grep ' 1 P ' &>/dev/null
    return $?
}

function select_password_file {
    export FZF_DEFAULT_OPTS="${FZF_DEFAULT_OPTS:-} --no-height --exit-0 --extended --cycle --reverse --bind change:top"

    if [[ "$ENABLE_PREVIEW" == "1" ]] && is_password_store_gpg_key_agent_cached; then
        fzf --bind "F12:toggle-preview" --preview 'pass show {}'
    else
        fzf
    fi
}

function main {
    if (( $# > 0 )); then
        if [[ "${1}" == "--preview" ]]; then
            ENABLE_PREVIEW="1"
        fi
    fi

    # shellcheck disable=1090
    source "${FZF_SOURCE:-$(realpath "${0%/*}")/fzf-source}"

    passfile=$(get_password_files | select_password_file)
    nohup xargs -r -d '\n' pass show --clip=1 &>/dev/null <<< "$passfile" &
    xdotool search --onlyvisible --pid $$ windowclose &>/dev/null
}

main "$@"
